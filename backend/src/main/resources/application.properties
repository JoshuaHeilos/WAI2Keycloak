spring.application.name=backend
server.port=8080
spring.datasource.username=postgres
spring.datasource.password=secret
spring.datasource.url=jdbc:postgresql://db:5432/mydatabase

spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Logging levels Hibernate/Springboot
logging.level.root=ERROR
logging.level.org.springframework=ERROR
logging.level.org.hibernate=ERROR
logging.level.org.hibernate.SQL=ERROR
logging.level.org.hibernate.type.descriptor.sql=ERROR

#Default case, DB is filled
#app.initializeData=false
#spring.jpa.hibernate.ddl-auto=update

# If Data should loded new uncomment
app.initializeData=true
spring.jpa.hibernate.ddl-auto=create

# Enable/Disable Request Logging
app.enableRequestLogging=false
app.keycloak-users-file=/workspace/app/keycloak_users.csv

# Configure logging to write to both console and file
logging.file.path=/workspace/app/logs
logging.file.name=backend.log
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# Security configurations
spring.security.user.name=admin
spring.security.user.password=admin

# application.properties
server.servlet.session.cookie.secure=false
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.same-site=lax


spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8080/realms/testrealm
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak:8080/realms/testrealm/protocol/openid-connect/certs

logging.level.org.springframework.security=ERROR
logging.level.org.springframework.security.oauth2=ERROR
